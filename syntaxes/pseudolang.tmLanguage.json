{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "pseudolang",
  "patterns": [
    { "include": "#keywords" },
    { "include": "#operators" },
    { "include": "#function" },
    { "include": "#function-name" },
    { "include": "#strings" },
    { "include": "#numeric-literal" },
    { "include": "#comments" },
    { "include": "#types" },
    { "include": "#variable-assign" }
  ],
  "repository": {
    "function": {
      "patterns": [
        {
          "name": "entity.name.tag",
          "match": "\\b(Module|End Module|Function|End Function)\\b"
        }
      ]
    },
    "function-name": {
      "patterns": [
        {
          "name": "entity.name.function",
          "match": "\\w+(?=\\s*\\()"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "\\b(Constant|Declare|Set|Input|Display|Call|If|End If|Then|Else|While|Break|End While|For|To|End For|Open|Write|Select|End Select|Case|Default|Do|Return)\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.new",
          "match": "\\s+([+/%^*.><≥≤=&|!-]|\\[|\\]|MOD|==|!=|AND|OR|<=|>=)\\s+"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type",
          "match": "\\b(String|Real|Boolean|Integer|Ref|OutputFile|InputFile)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.pseudolang",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.pseudolang",
          "match": "\\\\."
        }
      ]
    },
    "numeric-literal": {
      "patterns": [
        {
          "name": "constant.numeric.hex.js",
          "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F][0-9a-fA-F_]*\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.binary.js",
          "match": "\\b(?<!\\$)0(b|B)[01][01_]*\\b(?!\\$)"
        },
        {
          "name": "constant.numeric.octal.js",
          "match": "\\b(?<!\\$)0(o|O)?[0-7][0-7_]*\\b(?!\\$)"
        },
        {
          "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)| # 1.1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[eE][+-]?[0-9][0-9_]*\\b)|             # 1.E+3\n  (?:\\B(\\.)[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|             # .1E+3\n  (?:\\b[0-9][0-9_]*[eE][+-]?[0-9][0-9_]*\\b)|                 # 1E+3\n  (?:\\b[0-9][0-9_]*(\\.)[0-9][0-9_]*\\b)|                      # 1.1\n  (?:\\b[0-9][0-9_]*(\\.)\\B)|                                  # 1.\n  (?:\\B(\\.)[0-9][0-9_]*\\b)|                                  # .1\n  (?:\\b[0-9][0-9_]*\\b(?!\\.))                                 # 1\n)(?!\\$)",
          "captures": {
            "0": {
              "name": "constant.numeric.decimal.js"
            },
            "1": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "2": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "3": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "4": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "5": {
              "name": "meta.delimiter.decimal.period.js"
            },
            "6": {
              "name": "meta.delimiter.decimal.period.js"
            }
          }
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "contentName": "comment.line.double-slash.js",
          "begin": "(^[ \\t]+)?((//)(?:\\s*((@)internal)(?=\\s|$))?)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.js"
            },
            "2": {
              "name": "comment.line.double-slash.js"
            }
          },
          "end": "(?=$)"
        },
        {
          "name": "comment.block.js",
          "begin": "(/\\*)(?:\\s*((@)internal)(?=\\s|(\\*/)))?",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment.js"
            },
            "2": {
              "name": "storage.type.internaldeclaration.js"
            },
            "3": {
              "name": "punctuation.decorator.internaldeclaration.js"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.js"
            }
          }
        }
      ]
    }
  },
  "scopeName": "source.pseudolang"
}
